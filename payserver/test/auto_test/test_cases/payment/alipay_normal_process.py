# -*- coding: utf-8 -*-
#
#   Project: payunion
#    Author: Xie Wangyi
#
#   Copyright (c) 2018 麦禾互动. All rights reserved.
import uuid
from urllib.parse import parse_qs

from django.utils import timezone
from dynaconf import settings as dynasettings
from rest_framework.test import APITestCase

import config
from common.model_manager.payment_manager import alipay_payment
from common.models import Account, Coupon
from config import COUPON_STATUS, MERCHANT_ADMIN_TYPES, MERCHANT_STATUS, VALID_STRATEGY
from test.auto_test.steps.alipay import AlipayPaymentSteps
from test.auto_test.steps.client import ClientSteps
from test.auto_test.steps.merchant import MerchantLoginMockStep, MerchantStep, TransactionStep
from test.auto_test.steps.shared_pay import SharedPaySteps
from test.test_config import AutoTestConfig
from test.unittest.fake_factory import PayunionFactory


class TestWechatPaySteps(APITestCase):
    def setUp(self):
        # We use a faked ALIPAY_PUBLIC_KEY to mock the alipay response.
        # ALIPAY_PUBLIC_KEY and its corresponding private key is generated by ourselves.
        self.ALIPAY_PUBLIC_KEY_backup = dynasettings.ALIPAY_PUBLIC_KEY
        dynasettings.ALIPAY_PUBLIC_KEY = AutoTestConfig.self_generated_alipay_public_key
        alipay_payment.api_instance.alipay_public_key = AutoTestConfig.self_generated_alipay_public_key

        self.factory = PayunionFactory()

        try:
            self.platform_account = Account.objects.get(id=1)
        except Account.DoesNotExist:
            self.platform_account = self.factory.create_account(id=1, balance=0,
                                                                withdrawable_balance=0,
                                                                alipay_balance=0,
                                                                alipay_withdrawable_balance=0)
        self.originator_account = self.factory.create_account(real_name='引流商户', balance=0,
                                                              withdrawable_balance=0,
                                                              alipay_balance=0,
                                                              alipay_withdrawable_balance=0)
        self.merchant_account = self.factory.create_account(real_name='收款', balance=0,
                                                            withdrawable_balance=0,
                                                            alipay_balance=0,
                                                            alipay_withdrawable_balance=0)
        self.inviter_account = self.factory.create_account(real_name='邀请人', balance=0,
                                                           withdrawable_balance=0,
                                                           alipay_balance=0,
                                                           alipay_withdrawable_balance=0)
        self.inviter = self.factory.create_marketer(account=self.inviter_account)

        self.test_client = self.factory.create_client(openid='1234567890', status=0)
        self.merchant = self.factory.create_merchant(account=self.merchant_account,
                                                     inviter=self.inviter,
                                                     status=MERCHANT_STATUS.USING)
        self.originator = self.factory.create_merchant(account=self.originator_account)
        self.rule = self.factory.create_coupon_rule(merchant=self.merchant,
                                                    valid_strategy=VALID_STRATEGY.EXPIRATION,
                                                    expiration_days=30)
        self.coupon = self.factory.create_coupon(rule=self.rule, client=self.test_client,
                                                 originator_merchant=self.originator,
                                                 min_charge=1000, discount=100,
                                                 obtain_datetime=timezone.now(),
                                                 status=COUPON_STATUS['NOT_USED'])

        self.merchant_admin = self.factory.create_merchant_admin(
            merchant_admin_type=MERCHANT_ADMIN_TYPES.ADMIN,
            work_merchant=self.merchant
        )
        super(TestWechatPaySteps, self).setUpTestData()

    def tearDown(self):
        dynasettings.ALIPAY_PUBLIC_KEY = self.ALIPAY_PUBLIC_KEY_backup
        alipay_payment.api_instance.alipay_public_key = self.ALIPAY_PUBLIC_KEY_backup

    def test_workflow(self):
        client_steps = ClientSteps()

        # Login
        code = uuid.uuid4().hex

        def validate(request):
            params = parse_qs(request.query)
            self.assertEqual(params['app_id'][0], str(dynasettings.ALIPAY_APP_ID))
            self.assertEqual(params['code'][0], code)
            self.assertEqual(params['grant_type'][0], 'authorization_code')
            return True

        login_result = client_steps.alipay_login(code,
                                                 mocked_user_id=self.test_client.openid,
                                                 validate=validate)
        access_token = login_result['access_token']
        self.assertEqual(len(access_token), 32)

        # Get user info
        me_info = client_steps.me(access_token)
        assert me_info

        # Get all coupons
        coupons = client_steps.get_coupons(access_token)
        self.assertEqual(len(coupons), 1)
        self.assertEqual(coupons[0]['id'], self.coupon.id)
        self.assertEqual(coupons[0]['rule']['merchant']['name'], self.merchant.name)
        self.assertEqual(coupons[0]['discount'], self.coupon.discount)
        self.assertEqual(coupons[0]['min_charge'], self.coupon.min_charge)

        # Get merchant info
        merchant_info = client_steps.get_merchant_info(access_token,
                                                       self.merchant.payment_qr_code.uuid)
        self.assertTrue(merchant_info)
        self.assertTrue(merchant_info['id'])
        self.assertTrue(merchant_info['name'])
        self.assertTrue(merchant_info['description'])
        self.assertTrue(merchant_info['avatar_url'])
        self.assertTrue(isinstance(merchant_info['status'], int))

        # Place order
        alipay_payment_steps = AlipayPaymentSteps(
            access_token)
        shared_pay_steps = SharedPaySteps(access_token)

        place_order_result = alipay_payment_steps.place_order(
            self.merchant.id, 1000,
            self.coupon.id)
        assert place_order_result
        self.assertEqual(place_order_result['code'], '10000')
        self.assertEqual(place_order_result['msg'], 'Success')
        self.assertEqual(len(place_order_result['out_trade_no']), 32)

        # Cancel the order
        cancel_order_result = alipay_payment_steps.cancel_order(
            place_order_result['out_trade_no'])
        assert cancel_order_result['new_coupon']
        self.coupon = Coupon.objects.get(id=cancel_order_result['new_coupon']['id'])
        assert self.coupon

        # Place another order
        place_order_result = alipay_payment_steps.place_order(
            self.merchant.id, 1000,
            self.coupon.id)
        assert place_order_result
        self.assertEqual(place_order_result['code'], '10000')
        self.assertEqual(place_order_result['msg'], 'Success')
        self.assertEqual(len(place_order_result['out_trade_no']), 32)

        poll_result_result = shared_pay_steps.poll_result(
            place_order_result['out_trade_no'],
            None, None, None
        )
        assert poll_result_result['payment']['status'] == 0

        # Payment callback
        callback_response = alipay_payment_steps.payment_callback(
            dynasettings.ALIPAY_APP_ID,
            self.test_client.openid,
            place_order_result['out_trade_no'],
            900,
        )
        assert '"OK"' == callback_response.content.decode()

        poll_result_result = shared_pay_steps.poll_result(
            place_order_result['out_trade_no'],
            None, None, None
        )
        assert poll_result_result['payment']['status'] == 1

        # login merchant
        code = uuid.uuid4().hex
        resp = MerchantLoginMockStep(self).login(
            code,
            mocked_unionid=self.merchant_admin.wechat_unionid)
        token = resp.json()['token']
        assert token

        # get merchant info
        me = MerchantStep(self, token=token).me().json()
        self.assertEqual(me['name'], self.merchant.name)

        # get order detail
        order_detail = TransactionStep(self, token=token).retrieve(
            transaction_id=place_order_result['out_trade_no']).json()
        self.assertEqual(order_detail['status'], config.PAYMENT_STATUS.FROZEN)

        # refund
        refund_result = TransactionStep(self, token=token).refund(
            payment_id=place_order_result['out_trade_no']).json()
        self.assertEqual(refund_result, {})

        # get order detail
        order_detail = TransactionStep(self, token=token).retrieve(
            transaction_id=place_order_result['out_trade_no']).json()
        self.assertEqual(order_detail['status'], config.PAYMENT_STATUS.REFUND)

        # ********************************************
        # Place another to test unfreeze
        place_order_result = alipay_payment_steps.place_order(
            self.merchant.id, 1000,
            Coupon.objects.filter(client=self.test_client).order_by('-id').first().id)

        # Payment callback
        alipay_payment_steps.payment_callback(
            dynasettings.ALIPAY_APP_ID,
            self.test_client.openid,
            place_order_result['out_trade_no'],
            900,
        )

        # Unfreeze and check result.
        shared_pay_steps.unfreeze_immediately()

        order_detail = TransactionStep(self, token=token).retrieve(
            transaction_id=place_order_result['out_trade_no']).json()
        self.assertEqual(order_detail['status'], config.PAYMENT_STATUS.FINISHED)
