# -*- coding: utf-8 -*-
#
#   Project: payunion
#    Author: Xie Wangyi
#
#   Copyright (c) 2018 麦禾互动. All rights reserved.
import base64
import re
from urllib.parse import urlencode

import requests_mock
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from django.utils import timezone
from faker import Faker
from rest_framework.reverse import reverse

from test.auto_test.callback.alipay_pay import AlipayPaymentCallback
from test.auto_test.steps.base import BaseStep

fake = Faker('zh_CN')


class AlipayPaymentSteps(BaseStep):
    # The alipay private key is generated by ourselves, need to use its corresponding public key to
    # verify the sign.
    private_key = 'MIIEowIBAAKCAQEAmvY1fgdpM9i56+0y+2bqa1eVf5nQl9eKbRwihLKV7EL/0DguFoc6qYrDqfyfKXCHVOrWktK/rEhASwAdWePrw4WYQP2W0lX1yPWZsEOPxTrtPpeyb+1LCHI1ppm7iN824y8Xb9ryJG9K6sqkBvLfs10d/DrOLCHGfWwmx+YIwUBUhNGvYZ2KTKq+O/E4iRG6NUycBrW9b3/RjnbLnNYZ7HoOpyiink5+vEuuM5gIzaSAoVvOyJvpzdcC//dr4cnihlJ36rkD2aOZxsJgiZ1nNexPrx7eD3zOuf7qs9HNlipCUzjFL/cHM/BJhZp/9Rx0lYWH39F6c+jdwwUood7xfQIDAQABAoIBAAnIKv5Gp3xvXOUotwQprfiSscw5QHKlV4altQQdZdthK1bQhRBE/w3+xXUwjjeGc/SHUn44MYNFmFFjs3aeLZ7NCxxnJaMna/mAj3ASA7xWiO1flBL+rrLcysg2giEUvhk/OsKD1q84G0mQ+yO5JyfiY+ctKyCcDTSTpCsQOVNBjCsU9TfG0ux49ZvRfSKeGsXSoXmEJ+pk/fN2svNcxs9vfw309QaED/eoWSG7eeQDSbjTN/J6LwPJ2XubpDHYuoe7ND8VkpfYOAQD1eTUzkIcx4JqoqQhagq83+ibrwBdbbk+CPKkUNmWWvZIBqo+MqWJbc76LLdacFVsysF+v/0CgYEAzi4+EDpM73MvVHUGRIBa8ncXqJ6x3okSuR61WL1k4TK701zGUdtGIMyXdIE3988g3pmGdtMEjCROfQzdTZDTPu4E8sClNKPuSrzYSynxyDFtd+ByPu5E4GTEOkh5cZid4/2LhTNe7qCs4IC/tdGc9VRqWqoT0B8TyaPTMBMqVDsCgYEAwGe1swiel8yOZ8+DXjbsh8NRZcCmpt02L50S63lrBdi57nf9Q/w0dTiElyGpK7JEKOxcsMbdA1F8UOO/eb7ePBolDTjQ77uw/FoPF/5J99I/AXDauBUGSsXrQZ+JJTkc2qxTFAJ02wKS5I4bRcJqduq3V4LYWtgSTEGH+UhBDacCgYBpnwzSOVuSSvqTFIQKcYqlrVakXe+Wpbe+t7mE5TkZmGjZ5Sv/YQoy4TwxRcULIMOg5RsaIg2xUSQYMY/pHWjqUvqb9Q5swhHfnZBcKPega5m9kHBWRq9oGJbhmKEGDX3M/uULbn6SViNZuvr6xI/Yqc719SzDMDht0ovsk9TaYwKBgFs5kPPm9VLh4O8le5LTFci0+cX11s4s+kEPB2ZwNicaf+WqLIHsdW7SskL56bzXE+wXTUdfsnCdVQUBRsrRjYsPlluzgZT498xeYuOsZKPEoqzrNjird0VCm+2MV7k3YA/qPqWxGHiyurT1D8c+i74AQZeTaUOBSQOw2mh+MqHnAoGBAKInR+hNpt+3TdVRZ++FTzODgC5by6Zqgi4vlKECYmng/XUP15ivfT9IfPPKCYwnWLRbWMwCrE9BJt6Im29BzB5jQVw3vLMfxkuQ6ABoFV7AU00IHewyb0XlXTCkhUziIsQHKT17llxzh8IYxl/tvNSymvKn+17ICIrvFbGwm5Mt'

    def __init__(self, client_token):
        self.client_token = client_token

    @classmethod
    def _sign_data(cls, data):
        private_key = "-----BEGIN RSA PRIVATE KEY-----\r\n" \
                      "{}\r\n" \
                      "-----END RSA PRIVATE KEY-----".format(cls.private_key)
        sign_content = data.encode('utf8')
        key = RSA.importKey(private_key)
        message_hash = SHA256.new(sign_content)
        signer = PKCS1_v1_5.new(key)
        signature = signer.sign(message_hash)
        sign = base64.b64encode(signature)
        sign = str(sign, 'utf8')
        return sign

    def place_order(self, merchant_id, order_price, coupon_id):
        pattern = re.compile(r'^https://openapi\.alipaydev\.com/gateway\.do\?'
                             r'.*method=alipay\.trade\.create.*$')

        with requests_mock.Mocker(real_http=False) as m:
            m.register_uri('POST', pattern,
                           text=AlipayPaymentCallback().mock_place_order_success)
            url = reverse('place_order')
            self.client.credentials(HTTP_ACCESS_TOKEN=self.client_token)
            resp = self.client.post(url,
                                    data={"merchant_id": merchant_id,
                                          'order_price': order_price,
                                          'coupon_id': coupon_id,
                                          'channel': 1},
                                    format='json')
            return resp.json()


    # def payment_callback(self, trade_status=None, out_trade_no=None):
    #     url = reverse('alipay_payment_callback')
    #     param = dict(
    #         out_trade_no=out_trade_no,
    #         trade_status=trade_status,
    #     )
    #     sign = AlipayPaymentCallback.sign_request(param)
    #     callback_msg = dict(sign_type='RSA2',
    #                         sign=sign,
    #                         out_trade_no=out_trade_no,
    #                         trade_status=trade_status,
    #                      )
    #     resp = self.client.post(url, data=callback_msg)
    #     return resp.json()
    
    def cancel_order(self, payment_serial_number):
        pattern = re.compile(r'^https://openapi\.alipaydev\.com/gateway\.do\?'
                             r'.*method=alipay\.trade\.cancel.*$')

        with requests_mock.Mocker(real_http=False) as m:
            m.register_uri('POST', pattern,
                           text=AlipayPaymentCallback().mock_cancel_order_success)
            url = reverse('cancel_order')
            self.client.credentials(HTTP_ACCESS_TOKEN=self.client_token)
            resp = self.client.post(url,
                                    data={"payment_serial_number": payment_serial_number,
                                          'pay_channel': 1},
                                    format='json')
            return resp.json()

    def payment_callback(self, app_id, openid, payment_serial_number, total_fee):
        params = {
            "gmt_create": timezone.now().strftime('%Y-%m-%d %H:%M:%S'),
            "time_out_type": "finishFPAction",
            "subject": "快讯网络有限公司",
            "discount_amount": "0.00",
            "use_coupon": "N",
            "current_seller_received_amount": '%.02f' % (total_fee / 100.0),
            "out_channel_type": "BALANCE",
            "discount": "0.00",
            "buyer_id": openid,
            "notify_id": "aa7487778596d9ee838ec46c74611dampt",
            "pay_currency": "CNY",
            "settle_currency": "CNY",
            "out_channel_amount": '%.02f' % (total_fee / 100.0),
            "to_buyer_fee": "0.00",
            "price": "2.00",
            "total_fee": '%.02f' % (total_fee / 100.0),
            "pay_access_channel": "{\"access_channel\":\"APP\",\"term_equip_type\":\"MOBILE\",\"app_type\":\"ALIPAYAPP\",\"term_tech\":\"UNKNOW\"}",
            "out_channel_inst": "INST_ALIPAY",
            "receipt_amount": '%.02f' % (total_fee / 100.0),
            "app_id": "2016091800543597",
            "buyer_pay_amount": '%.02f' % (total_fee / 100.0),
            "seller_id": "2088102176254323",
            "paytools_pay_detail": "[{\"ALIPAYACCOUNT\":{\"amount\":\"2.00\"}}]",
            "buyer_email": "cyv***@sandbox.com",
            "notify_action_type": "payByAccountAction",
            "notify_time": "2018-10-16 11:28:31",
            "to_seller_fee": '%.02f' % (total_fee / 100.0),
            "mdiscount_amount": "0.00",
            "biz_product": "FACE_TO_FACE_PAYMENT",
            "trade_action": "PAY",
            "version": "1.0",
            "payment_type": "1",
            "out_trade_no": payment_serial_number,
            "total_amount": '%.02f' % (total_fee / 100.0),
            "trade_no": "2018101622001483870500362184",
            "trade_role": "B@ROLE_USER",
            "buyer_logon_id": "cyv***@sandbox.com",
            "alipay_total_discount_amount": "0.00",
            "paytools_pay_amount": "[{\"ALIPAYACCOUNT\":\"2.00\"}]",
            "gmt_last_modify": "2018-10-16 11:28:30.499",
            "flag_trade_locked": "0",
            "charset": "utf-8",
            "seller_email": "lyohhx4963@sandbox.com",
            "notify_ext_info": "{}",
            "invoice_amount": '%.02f' % (total_fee / 100.0),
            "payment_currency": "CNY",
            "fund_bill_list": "[{\"amount\":\"2.00\",\"fundChannel\":\"ALIPAYACCOUNT\"}]",
            "notify_type": "trade_status_sync",
            "trade_status": "TRADE_SUCCESS",
            "is_total_fee_adjust": "N",
            "seller_received_total_amount": '%.02f' % (total_fee / 100.0),
            "gmt_payment": "2018-10-16 11:28:30",
            "product": "FP_SENIOR",
            "quantity": "1",
            "api_platform": "OPEN_API",
            "time_out": "2019-01-17 11:28:30",
            "trade_type": "FP",
            "auth_app_id": str(app_id),
            "pay_fee": '%.02f' % (total_fee / 100.0),
            "point_amount": "0.00"
        }

        sign_data = '&'.join(f'{k}={params[k]}' for k in sorted(params.keys()) if params[k])
        sign = self._sign_data(sign_data)
        params['sign'] = sign
        params['sign_type']='RSA2'
        body = urlencode(params)

        url = reverse('alipay_payment_callback')
        resp = self.client.post(url, body, content_type='application/x-www-form-urlencoded')
        return resp

