# -*- coding: utf-8 -*-
#
#   Project: payunion
#    Author: Xie Wangyi
#
#   Copyright (c) 2018 麦禾互动. All rights reserved.
import base64
import json
from urllib.parse import parse_qs

from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from faker import Faker

from common.models import Payment
from test.auto_test.callback.base import BaseCallback, call_validate
from test.test_config import AutoTestConfig

fake = Faker('zh_CN')


class AlipayPaymentCallback(BaseCallback):
    # The alipay private key is generated by ourselves, need to use its corresponding public key to
    # verify the sign.
    private_key = AutoTestConfig.self_generated_alipay_private_key

    def __init__(self, validate=None):
        super().__init__(validate)

    @classmethod
    def _sign_data(cls, data):
        private_key = "-----BEGIN RSA PRIVATE KEY-----\r\n" \
                      "{}\r\n" \
                      "-----END RSA PRIVATE KEY-----".format(cls.private_key)
        sign_content = data.encode('utf8')
        key = RSA.importKey(private_key)
        message_hash = SHA256.new(sign_content)
        signer = PKCS1_v1_5.new(key)
        signature = signer.sign(message_hash)
        sign = base64.b64encode(signature)
        sign = str(sign, 'utf8')
        return sign

    @staticmethod
    def _verify_sign():
        pass

    @staticmethod
    def _clean_json(params):
        return json.dumps(params).replace('\r', '').replace('\n', '').replace(' ', '')

    @call_validate
    def mock_place_order_success(self, request=None, context=None):
        params = parse_qs(request.query)
        biz_content = json.loads(params['biz_content'][0])
        out_trade_no = biz_content['out_trade_no']

        response = {'code': '10000', 'msg': 'Success',
                    'out_trade_no': out_trade_no,
                    'trade_no': '2018101021001004870500342883'}
        sign = self._sign_data(self._clean_json(response))

        context.headers['Content-Type'] = 'application/json'
        return self._clean_json({
            'alipay_trade_create_response': response,
            'sign': sign})

    @classmethod
    def sign_request(cls, params):
        private_key = "-----BEGIN RSA PRIVATE KEY-----\r\n" \
                      "{}\r\n" \
                      "-----END RSA PRIVATE KEY-----".format(cls.private_key)
        
        string_a = '&'.join(f'{k}={params[k]}' for k in sorted(params.keys()) if params[k])
        sign_content = string_a.encode('utf8')
        key = RSA.importKey(private_key)
        message_hash = SHA256.new(sign_content)
        signer = PKCS1_v1_5.new(key)
        signature = signer.sign(message_hash)
        sign = base64.b64encode(signature)
        sign = str(sign, 'utf8')
        
        return sign

    # @call_validate
    # def mock_refund_success(self, request=None, context=None):
    #     params = parse_qs(request.query)
    #     biz_content = json.loads(params['biz_content'][0])
    #     out_trade_no = biz_content['out_trade_no']
    #     refund_amount = biz_content['refund_amount']
    #     out_request_no = biz_content['out_request_no']
    #
    #     response = {'code': '10000', 'msg': 'Success',
    #                 'out_trade_no': out_trade_no,
    #                 # 'refund_amount': refund_amount,
    #                 'out_request_no': out_request_no,
    #                 'trade_no': '2018101021001004870500342883'}
    #     sign = self._sign_data(self._clean_json(response))
    #
    #     context.headers['Content-Type'] = 'application/json'
    #     return self._clean_json({
    #         'alipay_trade_refund_response': response,
    #         'sign': sign})

    @call_validate
    def mock_cancel_order_success(self, request=None, context=None):
        params = parse_qs(request.query)
        biz_content = json.loads(params['biz_content'][0])
        out_trade_no = biz_content['out_trade_no']

        response = {'code': '10000',
                    'msg': 'Success',
                    'action': 'close',
                    'retry_flag': 'N',
                    'out_trade_no': out_trade_no,
                    'trade_no': '2018101021001004870500342883'}
        sign = self._sign_data(self._clean_json(response))

        context.headers['Content-Type'] = 'application/json'
        return self._clean_json({
            'alipay_trade_cancel_response': response,
            'sign': sign})

    @call_validate
    def mock_refund_success(self, request=None, context=None):
        params = parse_qs(request.query)
        biz_content = json.loads(params['biz_content'][0])
        out_trade_no = biz_content['out_trade_no']
        payment = Payment.objects.get(serial_number=out_trade_no)
        paid_price = payment.order_price if payment.coupon is None else payment.order_price - payment.coupon.discount
        response = {
            "code": "10000",
            "msg": "Success",
            "buyer_logon_id": "cyv***@sandbox.com",
            "buyer_user_id": "2088102176283877",
            "fund_change": "Y",
            "gmt_refund_pay": '%.02f' % (paid_price / 100.0),
            "out_trade_no": out_trade_no,
            "refund_detail_item_list": [
                {
                    "amount": '%.02f' % (paid_price / 100.0),
                    "fund_channel": "ALIPAYACCOUNT"
                }
            ],
            "refund_fee": '%.02f' % (paid_price / 100.0),
            "send_back_fee": '%.02f' % (paid_price / 100.0),
            "trade_no": "2018101622001483870500362184"
        }
        sign = self._sign_data(self._clean_json(response))

        context.headers['Content-Type'] = 'application/json'
        return self._clean_json({
            'alipay_trade_refund_response': response,
            'sign': sign})

    @call_validate
    def mock_withdraw_success(self, request=None, context=None):
        params = parse_qs(request.query)
        biz_content = json.loads(params['biz_content'][0])
        out_biz_no = biz_content['out_biz_no']

        response = {
            "code": "10000",
            "msg": "Success",
            "out_biz_no": out_biz_no,
            "order_id": "20160627110070001502260006780837",
            "pay_date": "2013-01-01 08:08:08"
        }

        sign = self._sign_data(self._clean_json(response))

        context.headers['Content-Type'] = 'application/json'
        return self._clean_json({
            'alipay_fund_trans_toaccount_transfer_response': response,
            'sign': sign})
