#
"""
Django settings for payserver project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
import sys
from pathlib import Path

from dynaconf import settings as dynasettings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if BASE_DIR not in sys.path:
    sys.path.append(BASE_DIR)

LOG_DIR = f'{str(Path.home())}/logs/payunion/'
if not Path(LOG_DIR).exists():
    Path(LOG_DIR).mkdir(parents=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!b#fi^xm(@#jw9=v(_d9i)-pqn&6(%@ao_!c2$a$$(lc*)_b^4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = dynasettings.as_bool('IS_DEBUG')

ALLOWED_HOSTS = ["127.0.0.1", "0.0.0.0", "localhost",
                 "api.mishitu.com",
                 "api-alpha.mishitu.com",
                 "admin.mishitu.com",
                 "admin-alpha.mishitu.com",
                 "payweb.mishitu.com",
                 "payweb-alpha.mishitu.com",
                 # for development
                 "payserver.alpha.muchbo.com",
                 "192.168.31.100",
                 "zhangjihua-server.alpha.muchbo.com"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'common.apps.CommonConfig',
    'padmin.apps.PadminConfig',
    'puser.apps.PuserConfig',
    'marketer.apps.MarketerConfig',
    'ws_service.apps.WsServiceConfig',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'common.middlewares.ForceEnableCsrfCookieMiddleware',
    'common.middlewares.token_middleware',
    'common.middlewares.cors_middleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'payserver.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'payserver.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 引擎名字
        'NAME': dynasettings.MYSQL_DBNAME,  # 数据库名字
        'USER': dynasettings.MYSQL_USER,  # 数据库用户
        'PASSWORD': dynasettings.MYSQL_PASSWORD,  # 数据库密码
        'HOST': dynasettings.MYSQL_HOST,  # 数据库ip
        'PORT': dynasettings.as_int('MYSQL_PORT'),  # 数据库端口
        'OPTIONS': {'charset': 'utf8mb4'},
        'TEST': {
            'NAME': 'payserver_test',
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_general_ci',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': ('redis://{0}{1}:{2}/{3}'.format(
            ':%s@' % dynasettings.REDIS_PASSWORD if dynasettings.REDIS_PASSWORD else '',  # noqa
            dynasettings.REDIS_HOST,
            dynasettings.as_int('REDIS_PORT'),
            0)),
        'OPTIONS': {},
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = "default"

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 4,
    'UNAUTHENTICATED_USER': None,
    'UNAUTHENTICATED_TOKEN': None,
    'EXCEPTION_HANDLER': 'common.error_handler.custom_exception_handler'
}

LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)s] [%(module)s] [%(process)d %(thread)d] %(message)s'
            # noqa
        },
        'general': {
            'format': '%(asctime)s [%(levelname)s] [%(name)s.%(funcName)s] %(message)s'  # noqa
        },
        'simple': {
            'format': '%(asctime)s [%(levelname)s] %(message)s'
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'general'
        },
        'puser': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR + 'puser.log',
            'maxBytes': 1024 * 1024 * 20,
            'backupCount': 5,
            'formatter': 'general',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['null'],
            'propagate': False,
            'level': LOG_LEVEL,
        },
        'django.request': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'propagate': True,
        },
        'django.db.backends': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'filters': ['require_debug_true'],
            'propagate': False,
        },
        'puser': {
            'level': LOG_LEVEL,
            'handlers': ['puser', 'console'],
            'propagate': True
        },
        'merchant': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'propagate': False
        },
        'marketer': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'propagate': False
        },
        'padmin': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'propagate': False
        },
        'common': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            'propagate': False
        },
    }
}

# set for websocket
ASGI_APPLICATION = "payserver.routing.application"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": ['redis://{0}{1}:{2}/{3}'.format(
                ':%s@' % dynasettings.REDIS_PASSWORD if dynasettings.REDIS_PASSWORD else '',  # noqa
                dynasettings.REDIS_HOST,
                dynasettings.as_int('REDIS_PORT'),
                2)],
        },
    },
}
